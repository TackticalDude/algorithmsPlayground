<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="_equalizer_8cpp" kind="file" language="C++">
    <compoundname>Equalizer.cpp</compoundname>
    <includes refid="_equalizer_8h" local="yes">Equalizer.h</includes>
    <incdepgraph>
      <node id="42">
        <label>Equalizer.h</label>
        <link refid="_equalizer_8h_source"/>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>stdlib.h</label>
      </node>
      <node id="43">
        <label>Coefficient.h</label>
        <link refid="_coefficient_8h_source"/>
        <childnode refid="44" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>string</label>
      </node>
      <node id="53">
        <label>fstream</label>
      </node>
      <node id="49">
        <label>string.h</label>
      </node>
      <node id="46">
        <label>Block.h</label>
        <link refid="_block_8h_source"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>vector</label>
      </node>
      <node id="44">
        <label>math.h</label>
      </node>
      <node id="54">
        <label>iostream</label>
      </node>
      <node id="41">
        <label>src/Equalizer.cpp</label>
        <link refid="Equalizer.cpp"/>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>mutex</label>
      </node>
      <node id="55">
        <label>thread</label>
      </node>
      <node id="45">
        <label>Queue.h</label>
        <link refid="_queue_8h_source"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>algorithm</label>
      </node>
      <node id="47">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#include<sp/>&quot;Equalizer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal">Equalizer::Equalizer(<ref refid="class_queue" kindref="compound">Queue</ref><sp/>*from,<sp/><ref refid="class_queue" kindref="compound">Queue</ref><sp/>*to,<sp/><ref refid="structbiquad__t" kindref="compound">biquad_t</ref><sp/>treble,<sp/><ref refid="structbiquad__t" kindref="compound">biquad_t</ref><sp/>bass){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>_from<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>_to<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>_treble<sp/>=<sp/>treble;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_bass<sp/>=<sp/>bass;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>finished<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>equalizer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>_objThread<sp/>=<sp/>std::thread(&amp;Equalizer::run,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">Equalizer::Equalizer(<ref refid="class_queue" kindref="compound">Queue</ref><sp/>*from,<sp/><ref refid="class_queue" kindref="compound">Queue</ref><sp/>*to,<sp/><ref refid="structbiquad__t" kindref="compound">biquad_t</ref><sp/>treble,<sp/><ref refid="structbiquad__t" kindref="compound">biquad_t</ref><sp/>bass,<sp/>std::string<sp/>name){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>_from<sp/>=<sp/>from;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>_to<sp/>=<sp/>to;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>_treble<sp/>=<sp/>treble;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>_bass<sp/>=<sp/>bass;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>finished<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>_name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Created<sp/>equalizer&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>_objThread<sp/>=<sp/>std::thread(&amp;Equalizer::run,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Equalizer::stop(){</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>finished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Equalizer::run(){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!finished){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_block" kindref="compound">Block</ref><sp/>*toProcess<sp/>=<sp/>_from-&gt;requestBlock();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blockSize<sp/>=<sp/>toProcess-&gt;getSize();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(toProcess<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Thread<sp/>stopped<sp/>running<sp/>because<sp/>of<sp/>break&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*yBuffer<sp/>=<sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*)<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)<sp/>*<sp/>blockSize);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*xBuffer<sp/>=<sp/>toProcess-&gt;getDataChunk();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>toProcess-&gt;getSize();<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yBuffer[n]<sp/>=<sp/>_bass.b0<sp/>*<sp/>xBuffer[n]</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_bass.b1<sp/>*<sp/>(n<sp/>-<sp/>1<sp/>&gt;<sp/>0<sp/>?<sp/>xBuffer[n<sp/>-<sp/>1]<sp/>:<sp/>0)<sp/></highlight><highlight class="comment">//protection<sp/>against<sp/>negative<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_bass.b2<sp/>*<sp/>(n<sp/>-<sp/>2<sp/>&gt;<sp/>0<sp/>?<sp/>xBuffer[n<sp/>-<sp/>2]<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_bass.a1<sp/>*<sp/>(n<sp/>-<sp/>1<sp/>&gt;<sp/>0<sp/>?<sp/>yBuffer[n<sp/>-<sp/>1]<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_bass.a2<sp/>*<sp/>(n<sp/>-<sp/>2<sp/>&gt;<sp/>0<sp/>?<sp/>yBuffer[n<sp/>-<sp/>2]<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>toProcess-&gt;getSize();<sp/>n++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yBuffer[n]<sp/>=<sp/>_treble.b0<sp/>*<sp/>xBuffer[n]</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_treble.b1<sp/>*<sp/>(n<sp/>-<sp/>1<sp/>&gt;<sp/>0<sp/>?<sp/>xBuffer[n<sp/>-<sp/>1]<sp/>:<sp/>0)<sp/></highlight><highlight class="comment">//protection<sp/>against<sp/>negative<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_treble.b2<sp/>*<sp/>(n<sp/>-<sp/>2<sp/>&gt;<sp/>0<sp/>?<sp/>xBuffer[n<sp/>-<sp/>2]<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_treble.a1<sp/>*<sp/>(n<sp/>-<sp/>1<sp/>&gt;<sp/>0<sp/>?<sp/>yBuffer[n<sp/>-<sp/>1]<sp/>:<sp/>0)</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>_treble.a2<sp/>*<sp/>(n<sp/>-<sp/>2<sp/>&gt;<sp/>0<sp/>?<sp/>yBuffer[n<sp/>-<sp/>2]<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_to-&gt;put(toProcess);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">Equalizer::~Equalizer()<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;_objThread.join();</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Equalizer.cpp"/>
  </compounddef>
</doxygen>
